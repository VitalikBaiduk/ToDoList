{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","actions","payload","value","authReducer","reducer","isInitialized","setIsInitialized","appReducer","removeTodolistAC","action","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","el","addTaskAC","task","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","handleChange","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dccccbb4.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '821c238d-9c62-4ddd-8380-9af53c67e575'\n    }\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<{ id: string, email: string, login: string }>>('/auth/me')\n    },\n    logout() {\n        return instance.delete<ResponseType>('/auth/login')\n    }\n}\n\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\nimport {ResponseType} from '../api/todolists-api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error:data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error:'Some error occurred}'}))\n    }\n    dispatch(setAppStatusAC({status:'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\n    dispatch(setAppStatusAC({status:'failed'}))\n}\n","import {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\nlet slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC: (state, actions: PayloadAction<{ value: boolean }>) => {\n            state.isLoggedIn = actions.payload.value\n        }\n    }\n\n})\n\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n// (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case 'login/SET-IS-LOGGED-IN':\n//             return {...state, isLoggedIn: action.value}\n//         default:\n//             return state\n//     }\n// }\n// actions\n// export const setIsLoggedInAC = (value: boolean) =>\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status:'idle'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err) => {\n            handleServerNetworkError(err, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch<any>) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    authAPI.logout()\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: false}))\n                dispatch(setAppStatusAC({status: 'idle'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err) => {\n            handleServerNetworkError(err, dispatch)\n        })\n}\n\n// types\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {authAPI} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nlet slice = createSlice({\n    name: \"app\",\n    initialState: initialState,\n    reducers: {\n        setAppErrorAC: (state, actions: PayloadAction<{ error: string | null }>) => {\n            state.error = actions.payload.error\n        },\n        setAppStatusAC: (state, actions: PayloadAction<{ status: RequestStatusType }>) => {\n            state.status = actions.payload.status\n        },\n        setIsInitialized: (state) => {\n            state.isInitialized = true\n        }\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const setAppErrorAC = slice.actions.setAppErrorAC\nexport const setAppStatusAC = slice.actions.setAppStatusAC\nexport const setIsInitialized = slice.actions.setIsInitialized\n\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        }\n    })\n        .finally(() => {\n            dispatch(setIsInitialized())\n        })\n}\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: Array<TodolistDomainType> = []\n\n\nlet slice = createSlice({\n    name: \"todolists\",\n    initialState: initialState,\n    reducers: {\n        removeTodolistAC: (state, action: PayloadAction<{ id: string }>) => {\n            let index = state.findIndex((tl) => tl.id === action.payload.id)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        },\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'}, ...state)\n        },\n        changeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\n            let index = state.findIndex((tl) => tl.id === action.payload.id)\n            state[index].title = action.payload.title\n        },\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\n            let index = state.findIndex((tl) => tl.id === action.payload.id)\n            state[index].filter = action.payload.filter\n        },\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\n            let index = state.findIndex((tl) => tl.id === action.payload.id)\n            state[index].title = action.payload.status\n            // state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.status} : tl)\n        },\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        }\n    }\n})\n\n\nexport const todolistsReducer = slice.reducer\nexport const {\n    removeTodolistAC,\n    addTodolistAC,\n    changeTodolistTitleAC,\n    changeTodolistFilterAC,\n    changeTodolistEntityStatusAC,\n    setTodolistsAC\n} = slice.actions\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC({todolists: res.data}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatusAC({status: 'loading'}))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC({id: todolistId}))\n                //скажем глобально приложению, что асинхронная операция завершена\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\n// type ActionsType =\n//     | RemoveTodolistActionType\n//     | AddTodolistActionType\n//     | ReturnType<typeof changeTodolistTitleAC>\n//     | ReturnType<typeof changeTodolistFilterAC>\n//     | SetTodolistsActionType\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n// type ThunkDispatch = Dispatch<ActionsType |>\n","import {\n    addTodolistAC,\n    AddTodolistActionType, removeTodolistAC,\n    RemoveTodolistActionType, setTodolistsAC,\n    SetTodolistsActionType\n} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: TasksStateType = {}\n\nlet slice = createSlice({\n    name: \"tasks\",\n    initialState,\n    reducers: {\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\n            let tasks = state[action.payload.todolistId]\n            let index = tasks.findIndex((el) => el.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        },\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\n            state[action.payload.task.id].unshift(action.payload.task)\n        },\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\n            let tasks = state[action.payload.todolistId]\n            let index = tasks.findIndex((el) => el.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        },\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\n            state[action.payload.todolistId] = action.payload.tasks\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = []\n        })\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.id]\n        })\n        builder.addCase(setTodolistsAC, (state, action) => {\n            action.payload.todolists.forEach((tl) => {\n                state[tl.id] = []\n            })\n        })\n\n    }\n})\n\nexport const tasksReducer = slice.reducer\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC({tasks, todolistId}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            const action = removeTaskAC({taskId, todolistId})\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                const action = addTaskAC({task})\n                dispatch(action)\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport {Navigate} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\n        return state.authReducer.isLoggedIn\n    })\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC(id, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\n        dispatch(action)\n    }, [])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n\n    if (!isLoggedIn) {\n        return <Navigate to={\"login\"}/>\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                todolist={tl}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {setAppErrorAC} from '../../app/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport function ErrorSnackbar() {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC({error: null}))\n    };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./authReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\n        return state.authReducer.isLoggedIn\n    })\n    let dispatch = useDispatch()\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Invalid password address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n\n    if (isLoggedIn) {\n        return <Navigate to={\"/\"}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email &&\n                        formik.errors.email &&\n                        <div style={{color: \"red\"}}> {formik.errors.email}</div>}\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password &&\n                        formik.errors.password &&\n                        <div style={{color: \"red\"}}> {formik.errors.email}</div>}\n                        <FormControlLabel label={'Remember me'}\n                                          control={<Checkbox/>}\n                                          name={\"rememberMe\"}\n                                          checked={formik.values.rememberMe}\n                                          onChange={formik.handleChange}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress, Switch} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.authReducer.isLoggedIn\r\n    })\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    let isInitialized = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.app.isInitialized\r\n    })\r\n\r\n    let logoutHandler = () =>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n                    {/*<Route path=\"404\" element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>*/}\r\n                    <Route path={\"*\"} element={<Navigate to={\"login\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from \"../features/Login/authReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    authReducer: authReducer\n})\n// непосредственно создаём store\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\n})\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </React.StrictMode>,\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}