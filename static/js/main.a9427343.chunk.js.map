{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","actions","payload","value","authReducer","reducer","isInitialized","setIsInitialized","appReducer","todolistsReducer","removeTodolistAC","action","filter","tl","addTodolistAC","todolist","entityStatus","changeTodolistTitleAC","map","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","type","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9427343.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4a8253e0-de24-482c-bcee-5d211475e393'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: string, email: string, login: string }>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred}'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\nlet slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC: (state, actions: PayloadAction<{ value: boolean }>) => {\n            state.isLoggedIn = actions.payload.value\n        }\n    }\n\n})\n\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n// (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case 'login/SET-IS-LOGGED-IN':\n//             return {...state, isLoggedIn: action.value}\n//         default:\n//             return state\n//     }\n// }\n// actions\n// export const setIsLoggedInAC = (value: boolean) =>\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(setAppStatusAC({status:'idle'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err) => {\n            handleServerNetworkError(err, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch<any>) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    authAPI.logout()\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value: false}))\n                dispatch(setAppStatusAC({status: 'idle'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err) => {\n            handleServerNetworkError(err, dispatch)\n        })\n}\n\n// types\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {authAPI} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nlet slice = createSlice({\n    name: \"app\",\n    initialState: initialState,\n    reducers: {\n        setAppErrorAC: (state, actions: PayloadAction<{ error: string | null }>) => {\n            state.error = actions.payload.error\n        },\n        setAppStatusAC: (state, actions: PayloadAction<{ status: RequestStatusType }>) => {\n            state.status = actions.payload.status\n        },\n        setIsInitialized: (state) => {\n            state.isInitialized = true\n        }\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const setAppErrorAC = slice.actions.setAppErrorAC\nexport const setAppStatusAC = slice.actions.setAppStatusAC\nexport const setIsInitialized = slice.actions.setIsInitialized\n\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        debugger\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        }\n    })\n        .finally(() => {\n            dispatch(setIsInitialized())\n        })\n}\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nlet slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<{ id: string }>) => {\r\n            state.filter(tl => tl.id !== action.payload.id)\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n           return [{...action.payload.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n            state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        },\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.status} : tl)\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\n// (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id !== action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n// type ThunkDispatch = Dispatch<ActionsType |>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.authReducer.isLoggedIn\r\n    })\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./authReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\n        return state.authReducer.isLoggedIn\n    })\n    let dispatch = useDispatch()\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Invalid password address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n\n    if (isLoggedIn) {\n        return <Navigate to={\"/\"}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email &&\n                        formik.errors.email &&\n                        <div style={{color: \"red\"}}> {formik.errors.email}</div>}\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password &&\n                        formik.errors.password &&\n                        <div style={{color: \"red\"}}> {formik.errors.email}</div>}\n                        <FormControlLabel label={'Remember me'}\n                                          control={<Checkbox/>}\n                                          name={\"rememberMe\"}\n                                          checked={formik.values.rememberMe}\n                                          onChange={formik.handleChange}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress, Switch} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.authReducer.isLoggedIn\r\n    })\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    let isInitialized = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.app.isInitialized\r\n    })\r\n\r\n    let logoutHandler = () =>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n                    {/*<Route path=\"404\" element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>*/}\r\n                    <Route path={\"*\"} element={<Navigate to={\"login\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from \"../features/Login/authReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    authReducer: authReducer\n})\n// непосредственно создаём store\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\n})\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </React.StrictMode>,\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}